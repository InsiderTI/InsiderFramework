FROM debian:buster-slim
MAINTAINER Marcello Costa <contact@insiderframework.com>

ENV DEBIAN_FRONTEND noninteractive
ENV NGINX_VERSION 1.18.0-2~buster
ENV php_conf /etc/php/8.0/fpm/php.ini
ENV fpm_conf /etc/php/8.0/fpm/pool.d/www.conf

# **********************************************************************************************************
###### Updating mirrors ######
RUN apt-get update
# **********************************************************************************************************

# **********************************************************************************************************
####### Time Zone for Sao_Paulo/Brazil #######
# RUN cat '/usr/share/zoneinfo/America/Sao_Paulo' > /etc/localtime
# **********************************************************************************************************

# **********************************************************************************************************
####### Installing apt-utils ############
RUN apt-get install -y --no-install-recommends apt-utils
# **********************************************************************************************************

# System basics
RUN buildDeps='build-essential gcc make autoconf libc-dev zlib1g-dev pkg-config' \
    && set -x \
    && apt-get update \
    && apt-get install --no-install-recommends $buildDeps --no-install-suggests -q -y gnupg2 dirmngr wget \
    curl \
    apt-transport-https lsb-release ca-certificates \
    apt-utils \
    vim \
    zip \
    unzip \
    git \
    libmemcached-dev \
    libmemcached11

# Nginx
RUN echo "deb http://nginx.org/packages/debian `lsb_release -cs` nginx" | tee /etc/apt/sources.list.d/nginx.list \
    && curl -fsSL https://nginx.org/keys/nginx_signing.key | apt-key add - \
    && wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg \
    && echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list \
    && apt-get update && apt install nginx=${NGINX_VERSION} \
    && mkdir -p /etc/nginx/sites-available && mkdir -p /etc/nginx/sites-enabled \
    && mkdir -p /var/logs/nginx

# Default config override (default using docker-compose file)
# ADD ./nginx/nginx.conf /etc/nginx/nginx.conf

# Use default vhost
# RUN mv /etc/nginx/conf.d/default.conf /etc/nginx/sites-available/default.conf  \
# && ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf \

# Use insiderframework vhost  (default using docker-compose file)
#ADD ./nginx/sites-available/insiderframework.nginx.conf /etc/nginx/sites-available/insiderframework.conf
#RUN ln -s /etc/nginx/sites-available/insiderframework.conf /etc/nginx/sites-enabled/insiderframework.conf
WORKDIR /var/www/insiderframework

# Override default nginx welcome page
# COPY html /usr/share/nginx/html

# PHP packages
RUN apt-get install --no-install-recommends --no-install-suggests -q -y \
            php8.0-fpm \
            php8.0-cli \
            php8.0-dev \
            php8.0-common \
            php8.0-opcache \
            php8.0-mbstring \
            php8.0-curl \
            php8.0-mysql \
            php8.0-pgsql \
            php8.0-zip \
            php8.0-xml \
            php-pear

# PHP configuration
RUN pecl -d php_suffix=8.0 install -o -f memcached \
    && mkdir -p /run/php \

    # Setting up daemon
    && echo "#!/bin/sh\nexit 0" > /usr/sbin/policy-rc.d \

    # Avoiding possible security breach with non-php files
    && sed -i -e "s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g" ${php_conf} \

    # Environment, Get, Post, Cookie, and Server variables
    && sed -i -e "s/variables_order = \"GPCS\"/variables_order = \"EGPCS\"/g" ${php_conf} \

    # Redirect stout/sterr to main log
    && sed -i -e "s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g" ${fpm_conf} \

    # Number of simultaneous children requests
    && sed -i -e "s/pm.max_children = 5/pm.max_children = 4/g" ${fpm_conf} \

    # Number of child processes created at startup
    && sed -i -e "s/pm.start_servers = 2/pm.start_servers = 3/g" ${fpm_conf} \

    # The minimum number of inactive server processes
    && sed -i -e "s/pm.min_spare_servers = 1/pm.min_spare_servers = 2/g" ${fpm_conf} \

     # The maxium number of inactive server processes
    && sed -i -e "s/pm.max_spare_servers = 3/pm.max_spare_servers = 4/g" ${fpm_conf} \

    # The number of requests for each child process that must be executed before respawning
    && sed -i -e "s/pm.max_requests = 500/pm.max_requests = 200/g" ${fpm_conf} \

    # Nginx user/group
    && sed -i -e "s/www-data/nginx/g" ${fpm_conf} \

    # Do not use environment variables in worker process
    && sed -i -e "s/^;clear_env = no$/clear_env = no/" ${fpm_conf} \

    # Setup memcached
    && echo "extension=memcached.so" > /etc/php/8.0/mods-available/memcached.ini \  
    && ln -sf /etc/php/8.0/mods-available/memcached.ini /etc/php/8.0/fpm/conf.d/20-memcached.ini \
    && ln -sf /etc/php/8.0/mods-available/memcached.ini /etc/php/8.0/cli/conf.d/20-memcached.ini

# Composer
RUN php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
    php composer-setup.php --install-dir=/usr/local/bin --filename=composer && \
    php -r "unlink('composer-setup.php');" && \
    chmod +x /usr/local/bin/composer

# Clean env
RUN rm -rf /tmp/pear \
    && apt-get purge -y --auto-remove $buildDeps \
    && apt-get clean \
    && apt-get autoremove \
    && rm -rf /var/lib/apt/lists/*

# Add Scripts
ADD init.sh /usr/local/bin/init.sh
RUN chmod +x /usr/local/bin/init.sh

EXPOSE 80
ENTRYPOINT /usr/local/bin/init.sh && /bin/bash